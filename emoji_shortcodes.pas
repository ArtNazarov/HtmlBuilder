unit emoji_shortcodes;
(* Module for generation emojies *)
{$mode ObjFPC}{$H+}

interface

uses
  Classes, SysUtils, types_for_app;

{ Gets all available shortcodes }
function getEmojiShortCodes() : TEmojiShortCodesArray;
{ Applying emojies to html text }
function useEmojies(text : String) : String;


implementation

{ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ–¥–æ–≤ —ç–º–æ–¥–∑–∏ }
function getEmojiShortCodes(): TEmojiShortCodesArray;
var
  arr: TEmojiShortCodesArray;
begin
  SetLength(arr, 2); // –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∫–æ–¥–∞–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–æ–¥–∑–∏
  arr[0].shortcode := ':joy:';
  arr[0].utf8symbol := 'üòÇ'; // –≠–º–æ–¥–∑–∏ "–°–º–µ—é—â–∏–π—Å—è –¥–æ —Å–ª–µ–∑"

  arr[1].shortcode := ':smile:';
  arr[1].utf8symbol := 'üòÑ'; // –≠–º–æ–¥–∑–∏ "–£–ª—ã–±–∞—é—â–µ–µ—Å—è –ª–∏—Ü–æ"

  Result := arr; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ–¥–æ–≤
end;

{ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É }
function useEmojies(text: String): String;
var
  emojiArray: TEmojiShortCodesArray;
  i: Integer;
begin
  emojiArray := getEmojiShortCodes(); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ–¥–æ–≤

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—Ä–æ—Ç–∫–æ–º—É –∫–æ–¥—É –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏
  for i := Low(emojiArray) to High(emojiArray) do
  begin
    text := StringReplace(text, emojiArray[i].shortcode, emojiArray[i].utf8symbol, [rfReplaceAll]);
  end;

  Result := text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
end;

end.

